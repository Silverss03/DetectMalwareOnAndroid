from androguard.misc import AnalyzeAPK
from androguard.decompiler.dad.decompile import DvMethod
from androguard.decompiler.dad.decompile import DvClass
import os
from xml.etree import ElementTree
from xml.dom import minidom

def convert_descriptor(name):
	name = name[1:]
	return name.replace("/",".").replace(";","")

def check_dirs(directory):
		if not os.path.exists(direct + directory):
			try:
				os.makedirs(direct + directory)	
			except:
				pass

def check_path(class_path):
		org_path = class_path.replace(".","/")
		paths = org_path.split("/")
		paths = paths[:len(paths)-1]
		for index,folder in enumerate(paths):
			check_dirs('/'.join(paths[:index+1]))	
		return direct + org_path+".java"

def delete_last_line(file_output):
        f = open(file_output, "r")
        lines = f.readlines()[:-1]
        f.close()
        file = open(file_output, "w")
        file.writelines(lines)
        file.close()

apk_path = ''
direct = 'source/'

a, d, dx = AnalyzeAPK(apk_path)

# Get java source code
for dex in d:
    for _class in dex.get_classes():
        class_path = convert_descriptor(_class.get_name())
        path = check_path(class_path)
        if not os.path.exists(path):
            java = open(path,"w")
            class_name = _class.get_name().replace('/', '.')[1:-1]  # Convert Lcom/example/MyClass; to com.example.MyClass
            class_name_source_code = DvClass(_class, dx).get_source()
            java.write(class_name_source_code[:-2])
            for field in _class.get_fields():
                access_flags = field.get_access_flags_string()
                if access_flags == "0x0":
                    access_flags = ""
                    java.write("\t%s %s %s\n"% (access_flags,convert_descriptor(field.get_descriptor()),field.get_name()))
            for method in _class.get_methods():
                g = dx.get_method(method)	
                if method.get_code() == None:
                    continue
                ms = DvMethod(g)
                try:
                    ms.process()
                    for line in ms.get_source().split("\n"):
                           java.write("\t%s\n" % line)
                except:
                       pass
            java.write("}")
            java.flush()
            java.close()

# Get AndroidManifest.xml
android_manifest = a.get_android_manifest_xml()
manifest_str = ElementTree.tostring(android_manifest, encoding='utf8', method='xml')
manifest_str_formatted = minidom.parseString(manifest_str).toprettyxml(indent="    ")
with open('AndroidManifest.xml', 'w') as f:
    f.write(manifest_str_formatted)
