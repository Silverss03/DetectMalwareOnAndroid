from rgat.layers.relational_graph_attention_2 import RelationalGraphAttention
import tensorflow as tf

RELATIONS = 5

# Tạo dữ liệu đầu vào
def get_inputs():
    # Tạo một tensor mật độ đại diện cho các đặc trưng của các nút
    inputs = tf.keras.Input(shape=(64,), name="features_")
    return inputs

def get_support():
    # Tạo một SparseTensor với các giá trị và hình dạng cụ thể
    indices = [[0, 0]]  # chỉ một mục (1, 1)
    values = [0]  # giá trị của mục (1, 1)
    dense_shape = [2, 2]  # Hình dạng phản ánh một ma trận 2x2

    support = tf.sparse.SparseTensor(indices=indices, values=values, dense_shape=dense_shape)
    return support


class SparseTensorConverterLayer(tf.keras.layers.Layer):
    def __init__(self, **kwargs):
        super(SparseTensorConverterLayer, self).__init__(**kwargs)

    def call(self, inputs):
        # Thực hiện chuyển đổi từ SparseTensor sang Tensor
        return tf.sparse.to_dense(inputs)

def create_rgat_model(inputs, support, units):
    # Tạo một instance của lớp RGAT
    rgat = RelationalGraphAttention(units=units, relations=RELATIONS)

    # Sử dụng lớp SparseTensorConverterLayer để chuyển đổi support thành Tensor
    support = SparseTensorConverterLayer()(support)

    outputs = rgat(inputs=inputs, support=support)
    return outputs



def main():
    # Giả sử bạn đã định nghĩa các hàm get_inputs() và get_support()
    inputs_ph = get_inputs()
    support_ph = get_support()
    units = 64  # Định nghĩa số lượng units
    outputs = create_rgat_model(inputs_ph, support_ph, units)

    # Tạo model từ inputs và outputs
    model = tf.keras.Model(inputs=inputs_ph, outputs=outputs)
    # In ra tóm tắt của model
    model.summary()

if __name__ == "__main__":
    main()
